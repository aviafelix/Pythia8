    
          Basics
          ====== 

The Basics file contains three disparate main classes (plus two 
auxiliary ones), and could well be split accordingly. The current 
choice is one of convenience.

---------------------------------------------------------------------- 

   The Rndm class
   --------------

This class generates random numbers, using the Marsaglia-Zaman-Tsang
algorithm [1]. It is purely static, i.e. only exists in one copy, so 
that one cannot run several copies, each with the same random number 
sequence, by mistake. 

Random numbers R uniformly distributed in 0 < R < 1 are obtained with
   Rndm::flat();
There are also methods to generate according to an exponential, to 
x * exp(-x), to a Gaussian, or picked among a set of possibilites,
which make use of flat().

If the random number generator is not initialized before, it will be
so the first time it is asked to generate a random number, and then
with the default seed, 19780503. You can initialize, or reinitialize,
with your own choice of seed with a 
   Rndm::init(seed);
Here values 0 < seed < 900 000 000 gives so many different random 
number sequences, while seed = 0 will call the Stdlib time(0) function 
to provide a "random" seed, and seed < 0 will revert back to the
default seed.

The Pythia class defines a flag and a mode, that allows the seed to be
set in the Pythia::init call. That would be the standard way for a user
to the pick random number sequence in a run.

---------------------------------------------------------------------- 

   The RndmEngine class
   --------------------

RndmEngine is a base class for the external handling of random number
generation. The user-written derived class is called if a pointer to 
it has been handed in with the pythia.rndmEnginePtr() method. Since 
the default Marsaglia-Zaman-Tsang algorithm is quite good, chances 
are that any replacement would be a step down, but this may still be 
required by consistency with other program elements in big experimental 
frameworks.

There is only one pure virtual method in RndmEngine, to generate one
random number flat in the range between 0 and 1: 
  virtual double flat() = 0;
Note that methods for initialization are not provided in the base 
class, in part since input parameters may be specific to the generator
used, in part since initialization can as well be taken care of 
externally to Pythia.

An example illustrating how to run with an external random number
generator is provided in main05.cc.

---------------------------------------------------------------------- 

   The Vec4 and RotBstMatrix classes
   ---------------------------------

The Vec4 class gives an implementation of four-vectors. The member 
function names are based on the assumption that these represent 
momentum vectors. Thus one can get or set px, py, pz and e, but not 
x, y, z or t. (When production vertices are defined in the particle 
class, this is partly circumvented by new methods that hide a Vec4.)
Derived quantities like the pT, the pAbs, and the theta and phi angles 
may be read out. The names should be self-explanatory, so we refer 
to the header class.

A set of overloaded operators are defined for four-vectors, so that 
one may naturally add, subtract, multiply or divide four-vectors with 
each other or with double numbers, for all the cases that are 
meaningful.

The Particle object (see Event.man) contains a Vec4 p that stores the 
particle four-momentum, and another Vec4 vProd for the production vertex. 
Therefore a user would not normally access the Vec4 class directly, 
but by using the similarly-named methods of the Particle class. 
(The latter also stores the particle mass separately, offering an 
element of redundancy, helpful in avoiding some roundoff errors.) 
However, for simple analysis tasks it may be convenient to use Vec4, 
e.g., to define the four-vector sum of a set of particles.

Simple rotations and boosts of the four-vectors are easily obtained
with member functions. For a longer sequence of rotations and boosts, 
and where several Vec4 are involved for the same set of operations, 
a more efficient approach is to define a RotBstMatrix, which forms a 
separate auxiliary class. This matrix can be built up from the successive 
set of operations to be performed and, once defined, it can be applied 
on as many Vec4 as required. 

---------------------------------------------------------------------- 

   The Hist class
   --------------

This class gives a simple implementation of one-dimensional histograms,
useful for quick-and-dirty testing, without the need to link to more 
sophisticated packages. A Histogram is declared by a    
   Hist name( title, numberOfBins, xMin, xMax);
e.g. 
   Hist ZpT( "Z0 pT spectrum", 100, 0., 100.);
Alternatively you can first declare it and later define it:
   Hist ZpT;
   ZpT.book( "Z0 pT spectrum", 100, 0., 100.);

Once existing, one can add to its contents with 
   name.fill( xValue, weight); 
e.g.
   ZpT.fill( 22.7, 1.); 
where actually the weight defaults to 1 and therefore could be omitted
in this case.   

A histogram can be printed by making use of the overloaded << operator:
   cout << ZpT;

A set of overloaded operators have been defined, so that histograms can 
be added, divided by each other (bin by bin) and so on. Also overloaded 
operations with double real numbers are available, so that e.g. 
histograms easily can be rescaled. Thus one may write e.g.
  allpT = ZpT + 2. * HpT
assuming that allpT, ZpT and HpT have been booked with the same number
of bins and x range. That responsibility rests on the user; some checks
are made for compatibility, but not enough to catch all possible mistakes. 

Some further possibilities are included, like writing out histogram 
contents as a table, for plotting e.g. with Gnuplot.

---------------------------------------------------------------------- 

References

[1] G. Marsaglia, A. Zaman and W.-W. Tsang, 
    Stat. Prob. Lett. 9 (1990) 35

---------------------------------------------------------------------- 

Copyright C 2006 Torbjorn Sjostrand
