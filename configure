#!/bin/sh
#
# Configuration script, to be run before compilation
#
# Author: M. Kirsanov

#
# User-changeable part -------------------------------
#

#LCG platform. Can be needed if external libraries are specified
if [ x$MYLCGPLATFORM = x ]; then
  export MYLCGPLATFORM=slc3_ia32_gcc323
fi

# Defaults
export COMPMODE=OPT
export SHAREDLIBS=no

for arg in $* ; do
  if [ "x$arg" = "x--enable-debug" ] ; then
    COMPMODE=DBG
  elif [ "x$arg" = "x--enable-shared" ] ; then
    SHAREDLIBS=yes
  elif [ "x$arg" = "x--help" ] ; then
    echo -e \
    "\nUsage: ./configure [options] , where options are:\n\n"\
    "--help            : prints this help\n"\
    "--enable-debug    : turns on debugging flags and turns off optimization\n"\
    "--enable-shared   : turns on shared library creation (default no)\n"\
    "--lcgplatform=lcgplatformname : platform, default is slc3_ia32_gcc323\n"\
    "--with-hepmcversion : HepMC version (to be taken from CERN afs lcg external, e.g. =1.27.02)\n"\
    "--with-clhepversion : CLHEP version (to be taken from CERN afs lcg external, e.g. =1.9.2.3-aa)\n"
    exit
  elif [ "x${arg}" != "x${arg/=/}" ] ; then
    option=${arg/=*/}
    value=${arg/*=/}
    if [ "x${option}" = "x--lcgplatform" ] ; then
      MYLCGPLATFORM=${value}
    elif [ "x${option}" = "x--with-hepmcversion" ] ; then
      HEPMCVERSION=${value}
    elif [ "x${option}" = "x--with-clhepversion" ] ; then
      CLHEPVERSION=${value}
    else
      echo "${arg}: wrong option. Ignored." >&2
    fi
  fi
done

echo compilation mode is $COMPMODE
echo sharedlibs = $SHAREDLIBS

# Environment variables for building HepMC interface library. Remark: starting
# from HepMC version 2.00.00 CLHEP is not needed. Note that the HepMC interface
# library is used by the examples main21, main22. Attention: if you have already
# run these examples and you change HepMC or CLHEP version, you should
# reset your LD_LIBRARY_PATH
# The default values here correspond to CERN AFS lcg external
#
if [ "x${HEPMCVERSION}" != "x" ] ; then
  if [ "x${HEPMCLOCATION}" = "x" ] ; then
    export HEPMCLOCATION=/afs/cern.ch/sw/lcg/external/HepMC/${HEPMCVERSION}/${MYLCGPLATFORM}
  fi
fi
if [ "x${CLHEPVERSION}" != "x" ] ; then
  if [ "x${CLHEPLOCATION}" = "x" ] ; then
    export CLHEPLOCATION=/afs/cern.ch/sw/lcg/external/clhep/${CLHEPVERSION}/${MYLCGPLATFORM}
  fi
fi
#   If you want to assign these variables by hand:
#
#export HEPMCVERSION=1.27.02
#export HEPMCLOCATION=/afs/cern.ch/sw/lcg/external/HepMC/${HEPMCVERSION}/${MYLCGPLATFORM}
#export CLHEPVERSION=1.9.2.3-aa
#export CLHEPLOCATION=/afs/cern.ch/sw/lcg/external/clhep/${CLHEPVERSION}/${MYLCGPLATFORM}

#
# User-changeable part, experts  -----------------------------
#

# export FFLAGS_OPT="-O2 -Wuninitialized"
# -Wuninitialized outputs many irrelevant warnings and therefore obscurs 
export FFLAGS_OPT="-O2"
export FFLAGS_DBG=-g
export CFLAGS_OPT=-O2
export CFLAGS_DBG=-g
export CXXFLAGS_OPT="-O2 -ansi -pedantic -W -Wall"
export CXXFLAGS_DBG="-g -ansi -pedantic -W -Wall"
#
# Find platform.
#
export ARCH="`uname`"
export theGcc1=`g++ --version | awk '{print$3}'`
export theGcc=`echo ${theGcc1} | awk -F . '{print $1}'`
if [ ${theGcc} = 4 ]; then
  export ARCH=${ARCH}-gcc4
fi
echo Platform is $ARCH

#default platform settings:
export FC=g77
export CC=gcc
export FFLAGS="${FFLAGS_OPT}"
export CFLAGS="${CFLAGS_OPT}"
export CXXFLAGS="${CXXFLAGS_OPT}"
export FLIBS="-lfrtbegin -lg2c"
if [ ${COMPMODE} = OPT ]; then
  export FFLAGS="${FFLAGS_OPT}"
  export CFLAGS="${CFLAGS_OPT}"
  export CXXFLAGS="${CXXFLAGS_OPT}"
fi
if [ ${COMPMODE} = DBG ]; then
  export FFLAGS="${FFLAGS_DBG}"
  export CFLAGS="${CFLAGS_DBG}"
  export CXXFLAGS="${CXXFLAGS_DBG}"
fi
if [ $ARCH = Linux ]; then
  export FC=g77
  export FFLAGS="${FFLAGS_OPT} -Wno-globals"
  export CFLAGS="${CFLAGS_OPT}"
  export CXXFLAGS="${CXXFLAGS_OPT}"
  export FLIBS="-lfrtbegin -lg2c"
  if [ ${COMPMODE} = OPT ]; then
    export FFLAGS="${FFLAGS_OPT}"
    export CFLAGS="${CFLAGS_OPT}"
    export CXXFLAGS="${CXXFLAGS_OPT}"
  fi
  if [ ${COMPMODE} = DBG ]; then
    export FFLAGS="${FFLAGS_DBG} -Wno-globals"
    export CFLAGS="${CFLAGS_DBG}"
    export CXXFLAGS="${CXXFLAGS_DBG}"
  fi
fi
# Linux platform with gcc4: new Fortran90 compiler.
if [ $ARCH = Linux-gcc4 ]; then
  export FC=gfortran
  export FFLAGS="${FFLAGS_OPT}"
  export CFLAGS="${CFLAGS_OPT}"
  export CXXFLAGS="${CXXFLAGS_OPT}"
  export FLIBS="-lgfortran -lgfortranbegin"
  if [ ${COMPMODE} = OPT ]; then
    export FFLAGS="${FFLAGS_OPT}"
    export CFLAGS="${CFLAGS_OPT}"
    export CXXFLAGS="${CXXFLAGS_OPT}"
  fi
  if [ ${COMPMODE} = DBG ]; then
    export FFLAGS="${FFLAGS_DBG}"
    export CFLAGS="${CFLAGS_DBG}"
    export CXXFLAGS="${CXXFLAGS_DBG}"
  fi
fi

#Platform & opt/dbg - independent flags and variables:


#
# End of the user-changeable part ---------------------------
#
# Checks
#
if [ $?PYTHIA6LOCATION ]; then
  if [ x${PYTHIA6LOCATION} != x ]; then
    if [ ! -d ${PYTHIA6LOCATION} ]; then
      echo ERROR in PYTHIA6LOCATION: directory ${PYTHIA6LOCATION} does not exist
    fi
  fi
fi
if [ $?HEPMCLOCATION ]; then
  if [ x${HEPMCLOCATION} != x ]; then
    if [ ! -d ${HEPMCLOCATION}/include ]; then
      echo ERROR in HEPMCLOCATION: directory ${HEPMCLOCATION}/include does not exist
    fi
    if [ ! -d ${HEPMCLOCATION}/lib ]; then
      echo ERROR in HEPMCLOCATION: directory ${HEPMCLOCATION}/lib does not exist
    fi
  fi
fi
if [ $?CLHEPLOCATION ]; then
  if [ x${CLHEPLOCATION} != x ]; then
    if [ ! -d ${CLHEPLOCATION}/include ]; then
      echo ERROR in CLHEPLOCATION: directory ${CLHEPLOCATION}/include does not exist
    fi
    if [ ! -d ${CLHEPLOCATION}/lib ]; then
      echo ERROR in CLHEPLOCATION: directory ${CLHEPLOCATION}/lib does not exist
    fi
  fi
fi

rm -f config.mk

echo SHELL = /bin/sh > config.mk
echo ARCH = ${ARCH} >> config.mk
echo MYLCGPLATFORM = ${MYLCGPLATFORM} >> config.mk
echo SHAREDLIBS = ${SHAREDLIBS} >> config.mk
echo FC = ${FC} >> config.mk
echo CC = ${CC} >> config.mk
echo FFLAGS = ${FFLAGS} >> config.mk
echo CFLAGS = ${CFLAGS} >> config.mk
echo CXXFLAGS = ${CXXFLAGS} >> config.mk
echo FLIBS = ${FLIBS} >> config.mk
#
if [ x${PYTHIA6LOCATION} != x ]; then
  echo PYTHIA6LOCATION = ${PYTHIA6LOCATION} >> config.mk
fi
if [ x${PYTHIA6VERSION} != x ]; then
  echo PYTHIA6VERSION = ${PYTHIA6VERSION} >> config.mk
  echo PYTHIA6LIBNAME = "${PYTHIA6LIBNAME}" >> config.mk
fi
if [ x${HEPMCVERSION} != x ]; then
  echo HEPMCVERSION = ${HEPMCVERSION} >> config.mk
fi
if [ x${HEPMCLOCATION} != x ]; then
  echo HEPMCLOCATION = ${HEPMCLOCATION} >> config.mk
fi
if [ x${CLHEPVERSION} != x ]; then
  echo CLHEPVERSION = ${CLHEPVERSION} >> config.mk
fi
if [ x${CLHEPLOCATION} != x ]; then
  echo CLHEPLOCATION = ${CLHEPLOCATION} >> config.mk
fi
#
#
#
rm -f examples/config.sh
rm -f examples/config.csh
if [ x${HEPMCLOCATION} != x ]; then
  echo "#!/bin/csh" > examples/config.csh
  echo 'if( ! $?LD_LIBRARY_PATH ) then' >> examples/config.csh
  echo "  setenv LD_LIBRARY_PATH ${HEPMCLOCATION}/lib" >> examples/config.csh
  echo "else" >> examples/config.csh
  echo "  setenv LD_LIBRARY_PATH" '${LD_LIBRARY_PATH}'":${HEPMCLOCATION}/lib" >> examples/config.csh
  echo "endif" >> examples/config.csh
  if [ x${CLHEPLOCATION} != x ]; then
    echo "setenv LD_LIBRARY_PATH" '${LD_LIBRARY_PATH}'":${CLHEPLOCATION}/lib" >> examples/config.csh
  fi
  echo "#!/bin/sh" > examples/config.sh
  echo 'if [ ! $?LD_LIBRARY_PATH ]; then' >> examples/config.sh
  echo "  export LD_LIBRARY_PATH=${HEPMCLOCATION}/lib" >> examples/config.sh
  echo fi >> examples/config.sh
  echo 'if [ $?LD_LIBRARY_PATH ]; then' >> examples/config.sh
  echo "  export LD_LIBRARY_PATH="'${LD_LIBRARY_PATH}'":${HEPMCLOCATION}/lib" >> examples/config.sh
  echo fi >> examples/config.sh
  if [ x${CLHEPLOCATION} != x ]; then
    echo "export LD_LIBRARY_PATH="'${LD_LIBRARY_PATH}'":${CLHEPLOCATION}/lib" >> examples/config.sh
  fi
fi
