
      SigmaProcess
      ============

The SigmaProcess class contains the differential cross section
d(sigma-hat)/d(t-hat) for a few different simple 2 -> 2 processes:
* g g -> g g, 
* q g -> q g, 
* q_1 q_2 -> q_1 q_2 (1 = 2 or not),
* q_1 qbar_2 -> q_1 qbar_2 (1 = 2 or not), 
* q qbar -> q' qbar',
* g g -> q qbar, 
* q g -> q gamma, 
* q qbar -> g gamma and 
* q qbar -> gamma gamma.
So far the main application is for multiple interactions, where some
(eventually all) of these processes are included. 

It is not clear whether this is the beginning of a (somewhat) larger
collection of cross sections that could be generated as hard 
subprocesses. In the latter case some restructuring may be needed,
in terms of a base class and derived classes. Alternatively this
will be retained as a separate "fast" library only for multiple
interactions.

---------------------------------------------------------------------- 
 
   Implementation
   --------------

The code is structured so that several calls are expected to
prepare, calculate, and retrieve information.

1) Give in information on the scattering to be considered, either
      setupShTh( id1, id2, s-hat, t-hat) 
   where the incoming two flavours and two Mandelstam variables 
   are provided. Other kinematical variables and alpha_strong are
   then calculated. Alternatively
      setupShThAs( id1, id2, s-hat, t-hat, alpha_strong)
   where also alpha_strong is provided. This actually is the case
   for multiple interactions applications. 

2) Calculate and return d(sigma-hat)/d(t-hat), using one of the
   methods named after the process it refers to.

3) In step 2, also some further choices are made, as required,
   which can be read out afterwards, if desired
   a) id3New() and id4New() return the flavours of the two outgoing
   partons; often the same as the incoming but not always.
   b) colFlow() returns a single integer that packs the colour
   flow topology selected, in the form
      10^7 * c_1 + 10^6 * a_1 + 10^5 * c_2 + 10^4 * a_2 + 
      10^3 * c_3 + 10^2 * a_3 + 10 * c_4 + a_4
   where c_i and a_i is the colour and anticolour tag of parton i,
   using the Les Houches conventions starting with colour tag 1.
   (Such a solution does not scale well for higher multiplicities,
   but is time-efficient for 2 -> 2.) 
   Note that this code is for the nominal process, say q g -> q g,
   so that sides need be swapped for g q -> g q, and colour tags 
   with anticolour ones for qbar g -> qbar g, etc.
   
4) Better, however, is to let the routine do the 2 -> 2 kinematics   
   in the rest frame. If the topology desired coincides with the
   one most recently calculated, one only needs
      doKinematics()
   with no arguments, while otherwise 
      doKinematics( id1, id2, id3, id4, colourflow, s-hat, t-hat)

5) When kinematics has been set up, the partons can be retrieved
   with 
      getParton(i)
   0 <= i < 4, which returns a Particle. These can then be appended 
   to the event record, with mothers and colour tags properly offset,
   and boosted to the proper frame of the subcollision.

---------------------------------------------------------------------- 

   Variables
   ---------

The size of QCD cross sections is mainly determined by alpha_strong,
which is set at a scale of M_Z^2 and then evaulated at pT^2:

<parameter> SigmaProcess:alphaSvalue = 0.1265 min = 0.06 max = 0.25
The alpha_strong value at scale M_Z^2. 

<mode> SigmaProcess:alphaSorder = 1 min = 0 max = 2
Order at which alpha_strong runs,
0 = zeroth order, i.e. alpha_strong is kept fixed.
1 = first order, which is the normal value.
2 = second order. Since cross sections are given at leading order 
    there is no strong reason to use this option, but there is 
    also nothing wrong with it.

However, note that this is moot when setupShThAs is called, since then
the externally provided alpha_strong is used anyway. This is the
case with multiple interactions, which provides its own alpha_strong.

QED radiation is currently regulated by StandardModel:alphaEMfix.

A final option is 

<mode> SigmaProcess:nQuark = 5 min = 0 max = 5
Number of allowed quark flavours in q qbar -> q' qbar' and g g-> q qbar
processes. A change to 4 would exclude b bbar, etc. 

---------------------------------------------------------------------- 

Copyright C 2006 Torbjorn Sjostrand
