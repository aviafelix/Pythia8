<chapter name="The Les Houches Accord">

<h1>The Les Houches Accord</h1>

The Les Houches Accord for user processes [1] is the standard way to 
input parton-level information from a matrix-elements based generator 
into Pythia. The conventions for which information should be stored
has been defined in a Fortran context, as two commonblocks. Here a 
C++ equivalent is defined, as two separate classes.

<p/>
The <ci>LHAinit</ci> and <ci>LHAevnt</ci> classes are base classes, 
containing reading and printout functions, plus a pure virtual function 
each. Derived classes have to provide these two virtual functions to do 
the actual work. Currently the only derived classes are for reading 
information from the respective Fortran commonblock or for reading
it from Pythia 6.4-produced files. 

<p/>
Normally, pointers to objects of the derived classes should be handed
in with the <ci>pythia.init()</ci> method, see further the Particle Flow
page. (If you use the LHA interface to Pythia 6.4, this is taken care of 
internally, so no pointers need to be handed in.) 

<h2>Initialization</h2>

The <ci>LHAinit</ci> class stores information equivalent to the 
<ci>/HEPRUP/</ci> commonblock, as required to initialize the event 
generation chain. The main difference is that the vector container 
now allows a flexible number of subprocesses to be defined. For the 
rest, names have been modified, since the 6-character-limit does not 
apply, and variables have been regrouped for clarity, but nothing 
fundamental.

<p/>
The pure virtual function <ci>set()</ci> has to be implemented in the 
derived class, to set relevant information when called. It should
return <ci>false</ci> if it fails to set the info.

<p/>
Inside <ci>set()</ci>, such information can be set by the following 
methods:
<method name="beamA( identity, energy, pdfGroup, pdfSet)"> 
sets the properties of the first incoming beam (cf. the Fortran
<ci>IDBMUP(1), EBMUP(1), PDFGUP(1), PDFSUP(1)</ci>), and similarly 
a <ci>beamB</ci> method exists. The parton distribution information 
defaults to zero, meaning that internal sets are used.
</method>
<method name="strategy( choice)"> 
sets the event weighting and cross section  strategy (cd. <ci>IDWTUP</ci>).
</method>
<method name="process( idProcess, crossSection, crossSectionError, 
crossSectionMaximum)"> 
sets info on an allowed process (cf. <ci>LPRUP, XSECUP, XERRUP, XMAXUP</ci>). 
Each new call will append one more entry to the list of processes.
</method>

<p/>
Information is handed back by the following methods:
<method name="idBeamA(), eBeamA(), pdfGroupBeamA(), pdfSetBeamA()">
and similarly with <ei>A -> B</ei>, for the two beam particles.
</method>
<method name="strategy()">
for the strategy choice.
</method>
<method name="size()"> 
for the number of subprocesses.
</method>
<method name="idProcess(i), xSec(i), xErr(i), xMax(i)"> 
for process <ci>i</ci> in the range <ci>0 &lt;= i &lt; size()</ci>.   
</method>

The information can also be printed using the overloaded 
&lt;&lt; operator, e.g. <ci>cout &lt;&lt; LHAinitObject</ci>.

<h2>Event input</h2>

The <ci>LHAevnt</ci> class stores information equivalent to the 
<ci>/HEPEUP/</ci> commonblock, as required to hand in the next 
parton-level configuration for complete event generation. The main 
difference is that the vector container now allows a flexible number 
of partons to be defined. For the rest, names have been modified, 
since the 6-character-limit does not apply, and variables have been 
regrouped for clarity, but nothing fundamental.

<p/>
The Les Houches standard is based on Fortran arrays beginning with
index 1, and mother information is defined accordingly. In order to 
be compatible with this convention, the zeroth line of the C++ particle
array is kept empty, so that index 1 also here corresponds to the first
particle. One small incompatibility is that the <ci>size()</ci> method 
returns the full size of the particle array, including the empty zeroth 
line, and thus is one larger than the true number of particles 
(<ci>NUP</ci>). 

<p/>
The pure virtual function <ci>set()</ci> has to be implemented in the 
derived class, to set relevant information when called. It should
return <ci>false</ci> if it fails to set the info, e.g. if the supply of 
events in a file is exhausted.

<p/>
Inside <ci>set()</ci>, cuch information can be set by the following
methods:
<method name="process( idProcess, weight, scale, alphaQED, alphaQCD)"> 
tells which kind of process occured, with what weight, at what scale, 
and which <ei>alpha_EM</ei> and <ei>alpha_strong</ei> were used
(cf. <ci>IDPRUP, XWTGUP, SCALUP, AQEDUP, AQCDUP</ci>). This method also 
resets the size of the particle list, and adds the empty zeroth line, 
so it has to be called before the particle method below.
</method>
<method name="particle( id, status, mother1, mother2, colourTag1, 
colourTag2, p_x, p_y, p_z, e, m, tau, spin)"> 
gives the properties of the next particle handed in (cf. <ci>IDUP, ISTUP, 
MOTHUP(1,..), MOTHUP(2,..), ICOLUP(1,..), ICOLUP(2,..),  PUP(J,..), 
VTIMUP, SPINUP</ci>) .
</method>

<p/>
Information is handed back by the following methods:
<method name="idProc(), weight(), scale(), alphaQED(), alphaQCD()">.
</method>
<method name="size()">
for the size of the particle array, which is one larger than the number 
of particles in the event, since the zeroth entry is kept empty 
(see above).
</method>
<method name="id(i), status(i), mother1(i), mother2(i), col1(i), col2(i),
px(i), py(i), pz(i), e(i), m(i), tau(i), spin(i)"> 
for particle <ci>i</ci> in the range <ci>0 &lt;= i &lt; size()</ci>. 
(But again note that i = 0 is an empty line, so the true range begins 
at 1.)   
</method>

<p/>
The information can also be printed using the overloaded 
&lt;&lt; operator, e.g. <ci>cout &lt;&lt; LHAevntObject</ci>.

<h2>A runtime Fortran interface</h2>

The <ci>LHAinitFortran</ci> class derives from <ci>LHAinit</ci>. 
It reads initialization information from the Les Houches standard 
Fortran commonblock, assuming this commonblock behaves like an 
<ci>extern "C" struct</ci> named <ci>heprup_</ci>. (Note the final
underscore, to match how the gcc compiler internally names Fortran
files.) 

<p/>
Initialization is with
<code>
    LHAinitFortran lhaInit();
</code>
i.e. does not require any arguments. 

<p/>
The <ci>LHAevntFortran</ci> class derives from <ci>LHAevnt</ci>. 
It reads information on the next event, stored in the Les Houches 
standard Fortran commonblock, assuming this commonblock behaves like 
an <ci>extern "C" struct</ci> named <ci>hepeup_</ci>.

<p/>
Initialization is with
<code>
    LHAevntFortran lhaEvnt();
</code>
i.e. does not require any arguments. 

<p/>
See further the Accessing Pythia6 Processes page for information how 
Pythia 6.4 can be linked to make use of this facility. Several of the
example main programs illustrate how it can be used. 

<h2>An interface to Pythia6 files</h2>

The <ci>LHAinitPythia6</ci> class derives from <ci>LHAinit</ci>. 
It reads initialization information, written from Pythia 6.4 with the 
<ci>PYUPIN</ci> routine, from a given file. The file name should be 
given as argument at the instantiation, e.g.
<code> 
    LHAinitPythia6 lhaInit("ttsample.init");
</code>

<p/>
Thw <ci>LHAevntPythia6</ci>class derives from <ci>LHAevnt</ci>. 
It reads information on the next event, written from Pythia 6.4 with 
the <ci>PYUPEV</ci> routine, from a given file. The file name should be 
given as argument at the instantiation, e.g. 
<code> 
    LHAevntPythia6 lhaEvnt("ttsample.evnt");
</code> 

<p/>
The <ci>PYUPEV</ci> routine writes mother indices using the Fortran 
(and Les Houches) convention of the first particle being number 1, 
and so matches the C++ "fix" of an empty zeroth particle.  

<p/>
An example how to use events in such exernal files is found in 
<ci>main02.cc</ci>.

<h2>Other examples</h2>

A special <ci>strategy = 10</ci> (not present in the <ci>IDWTUP</ci> 
specification) has been added. It takes a given partonic input, 
no questions asked, and hadronizes it, i.e. does string fragmentation 
and decay. Thereby the normal process-level and parton-level machineries 
are bypassed, to the largest extent possible. (Some parts are used, 
e.g. first to translate the Les Houches event to the process record 
and later to the event record.) Such an option can therefore be used 
to feed in ready-made parton-level configurations, without needing to 
specify where these come from, i.e. there need be no beams or any such 
explicit information, but of course the user must have taken care of it
beforehand. 

<p/>
An example how this can be used for toy studies is found in 
<ci>main03.cc</ci>.

<h2>References</h2>

<ol>
<li>E. Boos et al., in the Proceedings of the Workshop on Physics at 
TeV Colliders, Les Houches, France, 21 May - 1 Jun 2001 
[hep-ph/0109068]</li>
</ol>

</chapter>

<!-- Copyright C 2006 Torbjorn Sjostrand -->
