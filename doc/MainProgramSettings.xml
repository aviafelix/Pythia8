<chapter name="Main-Program Settings">

<h2>Main-Program Settings</h2>

<h3>Introduction</h3>

The main program is up to the user to write. However, sample main
programs are provided. In one such class of programs, one may 
wish to read in key settings of the run from a "cards file". 
In this file some such settings are defined, and made available
inside the <code>Settings</code> machinery. They can thus be put among 
the other cards, and then read back in by the main program. 

<h3>Run settings</h3>

Here comes a first batch of settings that can be set in an input
"cards" file, and thereafter read out an used in the user-written 
main program. Usage is purely optional. 

<mode name="Main:numberOfEvents" default="1000" min="0">
The number of events to be generated.
</mode>

<mode name="Main:numberToList" default="2" min="0">
The number of events to list.
</mode>

<mode name="Main:timesToShow" default="50" min="0">
Print the number of events generated so far, this many times, 
i.e. once every <code>numberOfEvents/numberToShow</code> events.
</mode>

<mode name="Main:timesAllowErrors" default="10" min = "0">
Allow this many times that <code>pythia.next()</code> returns false, 
i.e. that an event is flawed, before aborting the run.
</mode>

<flag name="Main:showChangedSettings" default="on">
Print a list of the changed flag/mode/parameter/word settings.
</flag>

<flag name="Main:showAllSettings" default="off">
Print a list of all flag/mode/parameter/word settings.
</flag>

<flag name="Main:showChangedParticleData" default="off">
Print a list of particle and decay data for those particles 
that were changed (one way or another).
</flag>

<flag name="Main:showAllParticleData" default="off">
Print a list of all particle and decay data.
</flag>

<flag name="Main:writeChangedSettings" default="off">
Write a file with the changed flag/mode/parameter/word settings, in
a format appropriate to be read in at the beginning of a new  
run, using the <code>pythia.readFile("fileName")</code> method. 
</flag>

<word name="Main:changedSettingsFile" default="currentSettings.cmnd">
The name of the file to which the changed flag/mode/parameter/word
settings are written if <code>Main:writeChangedSettings</code>
is on. 
</word>

<flag name="Main:writeAllSettings" default="off">
Write a file with all flag/mode/parameter/word settings, in
a format appropriate to be read in at the beginning of a new  
run, using the <code>pythia.readFile("fileName")</code> method. 
</flag>

<word name="Main:allSettingsFile" default="allSettings.cmnd">
The name of the file to which a flag/mode/parameter/word 
settings are written if <code>Main:writeAllSettings</code>
is on. 
</word>

<flag name="Main:showAllStatistics" default="off">
Print all available statistics or only the minimal set at the end 
of the run.
</flag>

<h3>Incoming beams</h3>

Normally the identities and energies of the two incoming beam particles 
are given by the arguments of the init call. These settings can be
stored in an input "cards" file, in the following variables, and 
thereafter read out and used in the user-written main program. Usage is 
purely optional. 

<mode name="Main:idBeamA" default="2212">
The PDG <code>id</code> code for the first incoming particle.
</mode>

<mode name="Main:idBeamB" default="2212">
The PDG <code>id</code> code for the second incoming particle.
</mode>

<flag name="Main:inCMframe" default="on">
Assume collisions occur in the CM frame.
</flag>

<parm name="Main:eCM" default="1960." min="10.">
Collision CM energy, to be given if <code>Main:inCMframe</code> is on. 
</parm>

<parm name="Main:eBeamA" default="7000." min="0.">
The energy of the first incoming particle, moving in the 
<ei>+z </ei>direction. If the particle energy is smaller than its mass
it is assumed to be at rest. 
</parm>

<parm name="Main:eBeamB" default="7000." min="0."> 
The energy of the second incoming particle, moving in the 
<ei>-z</ei> direction. If the particle energy is smaller than its mass
it is assumed to be at rest.
</parm>

<h3>Sample main programs</h3>

To help exemplify what a main program could look like, a few simple
examples are provided: 

<ul>

<li><code>main01.cc</code> : a simple study of the charged multiplicity
for jet events at the LHC. (Brief example given in talks.)</li>

<li><code>main02.cc</code> : a simple study of the <ei>pT</ei> spectrum 
of Z bosons at the Tevatron. (Brief example given in talks.)</li>

<li><code>main03.cc</code> : a simple single-particle analysis of jet 
events, where input is set by <code>main03.cmnd</code> "cards file".</li>

<li><code>main04.cc</code> : a simple study of several different kinds 
of events, with the choice to be made in the <code>main04.cmnd</code> 
"cards file".</li>

<li><code>main05.cc</code> : generation of QCD jet events at the LHC, 
with jet analysis using the <code>CellJet</code> cone-jet finder.</li>

<li><code>main06.cc</code> : tests of internally implemented 
cross sections for elastic and diffractive topologies, using 
<code>main06.cmnd</code> to pick process.</li>

<li><code>main07.cc</code> : tests of internally implemented 
cross sections for minimum-bias events, using 
<code>main07.cmnd</code> to pick options.</li>

<li><code>main08.cc</code> : generation of the QCD jet cross section
by splitting the run into subruns, each in its own <ei>pT</ei> bin,
and adding the results properly reweighted.</li>

<li><code>main11.cc</code> : a fairly extensive study of 
event properties, with hard processes generated by PYTHIA 6, and 
making use of a <code>main11.cmnd</code> "cards file" illustrating 
many of the settings listed on these pages.</li>

<li><code>main12.cc</code> : tests of internally implemented cross 
sections for hard processes, compared with the corresponding PYTHIA 6 
ones, for processes selected in <code>main12.cmnd</code>.</li>

<li><code>main13.cc</code> : generation of LEP1 hadronic events, i.e. 
<ei>e^+e^- -> gamma*/Z^0 -> q qbar</ei>, with charged multiplicity, 
sphericity, thrust and jet analysis. </li>

<li><code>main14.cc</code> : a study of top events, fed in from the 
Les Houches Event File <code>ttbar.lhe</code>. This file currently only 
contains 100 events, so this program is  mainly a demonstration of 
principles. The Fortran program <code>main14for.f</code> has been used 
to generate the input file. This program can be modified to generate 
other files, bigger and/or for other processes.</li> 

<li><code>main15.cc</code> : tests of internally implemented cross sections
for Supersymmetric particle production, with SYSY spectrum defined in
<code>main15.spc</code> and settings in <code>main15.cmnd</code>.</li>

<li><code>main16.cc</code> : an example how the Les Houches Accord 
interface can be used to input various toy parton-level configurations,
e.g. to study the hadronization of junction topologies.</li>

<li><code>main17.cc</code> : shows how an external decay handler can 
be linked to handle the decays of some particles.</li>

<li><code>main18.cc</code> : shows how an external random number 
generator can be linked to handle this task.</li>

<li><code>main21.cc</code> : similar to main01, except that the 
event record is output in the HepMC event record format. Requires 
that HepMC and CLHEP are properly linked.</li>

<li><code>main22.cc</code> : similar to main11, except that the 
event record is output in the HepMC event record format. Requires 
that HepMC and CLHEP are properly linked.</li>

</ul>

<h3>Spares</h3>

For currently unforeseen purposes, a few dummy settings are made 
available here. The user can set the desired value in a "cards file"
and then use that value in the main program as desired.

<flag name="Main:spareFlag1" default="off">
</flag>

<flag name="Main:spareFlag2" default="off">
</flag>

<flag name="Main:spareFlag3" default="off">
</flag>

<mode name="Main:spareMode1" default="0">
</mode>

<mode name="Main:spareMode2" default="0">
</mode>

<mode name="Main:spareMode3" default="0">
</mode>

<parm name="Main:spareParm1" default="0.">
</parm>

<parm name="Main:spareParm2" default="0.">
</parm>

<parm name="Main:spareParm3" default="0.">
</parm>

<word name="Main:spareWord1" default="void">
</word>

<word name="Main:spareWord2" default="void">
</word>

<word name="Main:spareWord3" default="void">
</word>



</chapter>

<!-- Copyright C 2007 Torbjorn Sjostrand -->
