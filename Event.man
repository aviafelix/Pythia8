
      Event
      =====

This file contains two important classes, the Particle and the Event 
ones. The event record in Event is basically a vector of Particles,
so the two are closely related. Users will come in contact with both
of them, since event objects are public members of the Pythia class.
A third class is used to represent string junctions in the event.

---------------------------------------------------------------------- 
 
   Particle
   --------

A Particle corresponds to one entry/slot in the event record. Its 
properties therefore is a mix of ones belonging to a particle-as-such, 
like its identity code or four-momentum, and ones related to the 
event-as-a-whole, like which mother it has. 

What is stored for each particle is 
* the identity code, 
* the status code, 
* two mother indices,
* two daughter indices, 
* a colour and an anticolour index, 
* the four-momentum and mass, 
* the production vertex and proper lifetime,
* a pointer to the particle kind in the particle data tables.
From these, a number of further quantities may be derived.

The following member functions can be used to extract the information:

* id() : the identity of a particle, according to the PDG particle 
    codes [1].

* status() : status code. The status code includes information on how 
    a particle was produced, i.e. where in the program execution it was 
    inserted into the event record, and why. It also tells whether the 
    particle is still present or not. It does not tell how a particle 
    disappeared, whether by a decay, a shower branching, a 
    hadronization process, or whatever, but this is implicit in the 
    status code of its daughter(s). The basic scheme is:
        status = +- (10 * i + j)
            +      : still remaining particles
            -      : decayed/branched/fragmented/... and not remaining
            i =  1 - 9 : stage of event generation inside Pythia
              = 10 -19 : reserved for future expansion
              >= 20    : free for add-on programs
            j = 1 - 9  : further specification
    In detail, the list of foreseen status codes is: 
        11 - 19 : beam particles
             11 : the event as a whole 
             12 : incoming beam
             13 : incoming beam-inside-beam (e.g. gamma inside e)
             14 : outgoing elastically scattered 
             15 : outgoing diffractively scattered
        21 - 29 : particles of the hardest subprocess
             21 : incoming
             22 : intermediate (intended to have preserved mass)
             23 : outgoing 
        31 - 39 : particles of subsequent subprocesses
             31 : incoming
             32 : intermediate (intended to have preserved mass) 
             33 : outgoing 
        41 - 49 : particles produced by initial-state-showers
             41 : incoming on spacelike main branch
             42 : incoming copy of recoiler
             43 : outgoing produced in timelike sidebranch of shower
             44 : outgoing shifted by the branching
        51 - 59 : particles produced by final-state-showers
             51 : outgoing produced by parton branching
             52 : outgoing copy of recoiler, with changed momentum  
        61 - 69 : particles produced by beam-remnant treatment
             61 : incoming subprocess particle with primordial kT included
             62 : outgoing subprocess particle with primordial kT included
             63 : outgoing beam remnant  
        71 - 79 : partons in preparation of hadronization process
             71 : copied partons to collect into contiguous colour singlet  
             72 : copied recoiling singlet when ministring collapses to
                  one hadron and momentum has to be reshuffled
             73 : combination of very nearby partons into one
             74 : combination of two junction quarks (+ nearby gluons) 
                  to a diquark  
             75 : gluons split to decouple a junction-antijunction pair 
             76 : partons with momentum shuffled to decouple a 
                  junction-antijunction pair 
             77 : temporary opposing parton when fragmenting first two 
                  strings in to junction (should disappear again)
             78 : temporary combined diquark end when fragmenting last 
                  string in to junction (should disappear again)
        81 - 89 : primary hadrons produced by hadronization process
             81 : from ministring into one hadron 
             82 : from ministring into two hadrons 
             83, 84 : from normal string (the difference between the two 
                  is technical, whether fragmented off from the top of 
                  the string system or from the bottom, useful for debug 
                  only)
             85, 86 : primary produced hadrons in junction frogmentation 
                  of the first two string legs in to the junction, in 
                  order of treatment
        91 - 99 : particles produced in decay process
             91 : normal decay products
             92 : decay products after oscillation B0 <-> B0bar or 
                  B_s0 <-> B_s0bar
             93, 94 : decay handled by external program, normally 
                  or with oscillation
      101 - 199 : reserved for future expansion
            101 : particles with momenta shifted by Bose-Einstein effects (?)
      201 -     : free to be used by anybody   

* mother1(), mother2() : the indices in the event record where the 
    first and last mothers are stored, if any. 
    There are five allowed combinations of mother1 and mother2:
    (i) mother1 = mother2 = 0: for lines 0 - 2, where line 0 
        represents the event as a whole, and 1 and 2 the two incoming 
        beam particles; 
    (ii) mother1 = mother2 > 0: the particle is a "carbon copy" of 
       its mother, but with changed momentum as a "recoil"  effect, 
       e.g. in a shower;
    (iii) mother1 > 0, mother2 = 0: the "normal" mother case, where it 
       is meaningful to speak of one single mother to several products, 
       in a shower or decay;
    (iv) mother1 < mother2, both > 0, for abs(status) = 81 - 86: 
       primary hadrons produced from the fragmentation of a string 
       spanning the range from mother1 to mother2, so that all partons
       in this range should be considered mothers.
    (v) mother1 < mother2, both > 0, except case (iv): particles with 
       two truly different mothers, in particular the particles emerging 
       from a hard 2 -> n interaction.    
    Note that, in backwards evolution of initial-state showers, the 
      mother may well appear below the daughter in the event record. 
    The motherList(i) method of the Event class returns a vector of
      all the mothers, providing a uniform representation for all five
      cases, see further below. 

* daughter1(), daughter2() : the indices in the event record where the 
    first and last daughters are stored, if any. 
    There are five allowed combinations of daughter1 and daughter2:
    (i) daughter1 = daughter2 = 0: there are no daughters (so far);
    (ii) daughter1 = daughter2 > 0: the particle has a "carbon copy" 
       as its sole daughter, but with changed momentum as a "recoil" 
       effect, e.g. in a shower; 
    (iii) daughter1 > 0, daughter2 = 0: each of the incoming beams has
       only (at most) one daughter, namely the initiator parton of the 
       hardest interaction; further, in a 2 -> 1 hard interaction, like
       q qbar -> Z0, or in a clustering of two nearby partons, the 
       initial partons only have this one daughter; 
    (iv) daughter1 < daughter2, both > 0: the particle has a range 
      of decay products i in daughter1 <= i <= daughter2;
    (v) daughter2 < daughter1, both > 0: the particle has two 
      separately stored decay products (e.g. in backwards evolution 
      of initial-state showers).
    Note that, in backwards evolution of initial-state showers, the 
      daughters may well appear below the mother in the event record. 
    Also note that the mother-daughter relation normally is reciprocal,
      but not always. An example is hadron beams (indices 1 and 2), 
      where each beam remnant and the initiator of each multiple 
      interaction has the respective beam as mother, but the beam itself 
      only has the initiator of the hardest interaction as daughter.
    The daughterList(i) method of the Event class returns a vector of
      all the daughters, providing a uniform representation for all five
      cases, see further below. In that case, also all the daughters of
      the beams are caught, with the initiators of the basic process 
      given first,  while the rest are in no guaranteed order (since 
      they are found by a scanning of the event record for particles
      with the beam as mother, with no further information). 

* col(), acol(): the colour and anticolour tags, Les Houches Accord [2]
    style (starting from tag 101 by default, see below).

* px(), py(), pz(0), e() : the particle four-momentum components,
    alternatively extracted as a Vec4 p().

* m() : the particle mass.

* scale() : the scale at which a parton was produced, which can be 
    used to restrict its radiation to lower scales in subsequent
    steps of the shower evolution. Note that scale is linear in
    momenta, not quadratic (i.e. Q, not Q2). 

* xProd(), yProd(), zProd(), tProd() : the production vertex coordinates,
    in mm or mm/c, alternatively extracted as a Vec4 vProd() (but watch
    out: this Vec4 has components px(), py(), pz() and e(), which of
    course should be interpreted as above); the initial process is 
    assumed to occur at the origin.

* tau() : the proper lifetime, in mm/c; is assigned for all hadrons with
    positive nominal tau, tau0 > 0, even if not decayed by Pythia
    (because of one veto or another).

The same method names are overloaded to take an argument, in which case 
the corresponding property is set accordingly. There are also a few
other methods for input:
* statusPos(), statusNeg() : sets the status sign positive or negative,
    without changing the absolute value.
* statusCode(code) : changes the absolute value but retains the 
    original sign. 
* mothers(m1, m2) : sets both mothers in one go.
* daughters(d1, d2) : sets both daughters in one go.
* cols(c, ac) : sets both colour and anticolour in one go.
* p( px, py, pz, e) : sets the four-momentum in one go; alternative
    input as a Vec4 object.
* vProd(  xProd, yProd, zProd, tProd) : sets the production vertex 
    in one go; alternative input as a Vec4 object.

In addition, a number of derived quantities can easily be obtained 
(but cannot be set), such as:
* statusAbs : the absolute value of the status code.
* remains() : true for a remaining particle, i.e. one with positive 
    status code, else false.
* isQ(), isNotQ() : true for a quark or an antiquark, or the reverse.
* isG(), isNotG() : true for a gluon, or the reverse.
* isQorG() : true for a quark, an antiquark or a gluon. 
* isQQ() : true for a diquark or antidiquark. 
* isQorQQ(): true for a (anti)quark or (anti)diquark.
* isL() : true for a lepton (charged or neutrino).
* hasCol() : true when either of the colour or anticolour indices are 
    nonvanishing.
* m2() : squared mass.
* mCalc(), m2Calc() : (squared) mass calculated from the four-momentum;
    should agree with m(), m2() up to roundoff.
* eCalc() : energy calculated from the mass and three-momentum;
    should agree with e() up to roundoff.
* pT(), pT2() : (squared) transverse momentum.
* mT(), mT2() : (squared) transverse mass.
* pAbs(), pAbs2() : (squared) three-momentum size.
* theta(), phi() : polar and azimuthal angle.
* thetaXZ() : angle in the (p_x, p_z) plane, between -pi and +pi,
    with 0 along the +z axis 
* pPlus(), pMinus() : E +- p_z. 
* y(), eta() : rapidity and pseudorapidity.
* xDec(), yDec(), zDec(), tDec() : the decay vertex coordinates,
    in mm or mm/c, alternatively extracted as a Vec4 vDec(); 
    this decay vertex is calculated from the production vertex,
    the proper lifetime and the four-momentum assuming no magnetic
    field or other detector interference; it can be used to decide
    whether a decay should be performed or not, and thus is defined
    also for particles which Pythia did not let decay.

Each Particle contains a pointer to the respective ParticleDataEntry 
object in the particle data tables. This gives access to properties of 
the particle species as such. It is there mainly for convenience, and 
should be thrown if an event is written to disk, to avoid any problems 
of object persistency. Should an event later be read back in, the 
pointer will be recreated from the id code. This pointer is used by 
the following member functions:
* name() : the name of the particle, as a string.
* nameWithStatus() : as above, but for negative-status particles the
    name is given in brackets to emphasize that they are intermediaries.
* m0() : the nominal mass of the particle, according to the data tables.
* mass() : the mass of the particle, picked according to a Breit-Wigner
    distribution for particles with width, and thus different each time
    called. 
* constituentMass() : will give the constituent masses for quarks and
    diquarks, else the same masses as normal.
* colType() : 0 for colour singlets, 1 for triplets, -1 for antitriplets
    and 2 for octets.
* charge(), icharge() : charge, and three times it to make an integer.
* isCharged(), isNeutral() : charge different from or equal to 0.
* isVisible(), isInvisible() : particles with/without strong or
    electromagnetic interactions, which thereby are or are not visible
    in a normal detector.
* spinType() : 2 * spin + 1; still incomplete implementation.
* canDecay() : flag whether decay modes have been declared for a 
    particle, so that it could be decayed, should that be requested.
* mayDecay() : flag whether particle has been declared unstable or not,
    offering the main user switch to select which particle species 
    to decay.
* particleData() a reference to the ParticleDataEntry.

The Event class also contains a few methods defined for individual
particles, but may require some search in the event record and 
therefore cannot be defined as a Particle method, see below.

There are some further methods, inherited from Vec4, to rotate and 
boost the four-momentum, and a << method to list a single particle.

Not part of the event class proper, but obviously tightly linked,
are the metods m(Particle, Particle) and m2(Particle, Particle) 
to calculate the (squared) invariant mass of two particles.

Currently there is no information on polarization states.

---------------------------------------------------------------------- 
 
   Junction
   --------

A junction stores the properites associated with a baryon number that
is fully resolved, i.e. where three different colour indices are 
involved. There are two main applications, 
(1) baryon beams, where at least two valence quarks are kicked out,
    and so the motion of the baryon number is notrivial;
(2) baryon-number violating processes, e.g. in SUSY with broken
    R-parity.
Information on junctions is set, partly in the process generation,
partly in the beam remnants machinery, and used by the fragmentation 
routines, but the normal user does not have to know the details. 

For each junction, information is stored on the kind of junction, and 
on the three (anti)colour indices that are involved in the junction.
The possibilities foreseen are:
kind = 1 : incoming colourless particle to three outgoing colours 
    (e.g. baryon beam remnant or neutralino -> q q q);
kind = 2 : incoming colourless particle to three outgoing anticolours;
kind = 3 : one incoming anticolor (stored first) and two outgoing 
    colours (e.g. antisquark decaying to quark);
kind = 4 : one incoming color (stored first) and two outgoing 
    anti colours;
kind = 5 : incoming colour octet to three colours, where the incoming
    colour passes through unchanged and so need not be bokkept here, 
    while the incoming anticolor (stored first) and the two outgoing 
    colours are (e.g. gluino decay to three quarks);
kind = 6 : incoming colour octet to three anticolours, where the 
    incoming anticolour passes through unchanged and so need not be 
    bokkept here, while the incoming color (stored first) and the two 
    outgoing colours are.
The odd (even) kind codes corresponds to a +1 (-1) change in baryon
    number across the junction.
Currently only kind = 1 and 2 are implemented.

The kind and colour information in the list of junctions can be set 
or read with methods of the Event class, but are not of common 
interest and so not described here.

---------------------------------------------------------------------- 
 
   Event
   -----

As already mentioned, the Event class for event records basically
is a vector of Particles, so that it can expand to fit the event size.
The index operator is overloaded, so that event[i] corresponds to
the i'th particle of an Event object event. Thus event[i].id() 
returns the identity of the i'th particle. References to the 
first, i'th and last particle are obtained with event.front(),
event.at(i) and event.back(), respectively.

The event size can be found with size(), i.e. valid particles are 
stored in 0 <= i < event.size(). 
Line 0 is used to represent the event as a whole, with its total
four-momentum and invariant mass, but does nto form part of the
event history. Lines 1 and 2 contains the two incoming beams, and 
only from here on history tracing works as could be expected. That 
way unassigned mother and daughter indices can be put 0 without 
ambiguity. Depending on the task at hand, a loop may therefore start 
at an index 1 or 3 without any loss. 

New particles can be added to the end of the current event record
with append(Particle), or 
    append(id, status, mother1, mother2, daughter1, daughter2, 
      col, acol, p, m, scale);
where p is the four-momentum vector, and everything except id defaults 
to 0. The method returns the index of the new particle position. 
  
The existing particle at index iCopy can be copied to the end 
with copy(iCopy, newStatus = 0). By default, i.e. with newStatus = 0,
everything is copied precisely as it is, which means that history 
information has to be modified further by hand to make sense. With a
positive newStatus, the new copy is set up to be the daughter of the 
old, with status code newStatus, and the status code of iCopy is 
negated. With a negative newStatus, the new copy is instead set up
to be the mother of iCopy.

A listing of the whole event is obtained with list(). This 
function takes an ostream object as an optional argument.
The basic id, status, mother, daughter, colour, four-momentum
and mass data are always given, but the following switches can be 
set to provide further information, or restrict the set of particles
listed:

<flag> Event:listFinalOnly = off
The alternative mode, with this option on, omits all intermediate
particles, so that only ones with status > 0 are shown. 

<flag> Event:listScaleAndVertex = off
The alternative mode, with this option on, gives a second line
for each particle, with the production scale (in GeV), the
production vertex (in mm or mm/c) and the invariant lifetime
(also in mm/c).

<flag> Event:listMothersAndDaughters = off
The alternative mode, with this option on, gives a list of all
daughters and mothers of a particle, as defined by the motherList(i)
and daughterList(i) methods described below. It is purely intended 
for debug purposes, e.g. when writing an interface to another event
record format. 

<flag> Event:extraBlankLine = off
With this option on, an extra blank line is inserted after each 
particle. There is a tradeoff between improved legibility, in 
particular for Event:listMothersAndDaughters on, and a longer 
listing. 

<flag> Event:listJunctions = off
With this option on, a list of all junctions in the event is 
displayed after the normal particle list.

The event record can be emptied for the next event by a clear().
The last n entries can be removed by popBack(n), where n = 1 by default. 

The user would normally be concerned with the Event object that is a 
public member "event" of the Pythia class. Thus, having declared a 
Pythia object "pythia", pythia.event[i].id() would be used to return 
the identity of the i'th particle, and pythia.event.size() to give 
the size of the event record. 

A Pythia object contains a second event record for the hard process
alone, called "process", used as input for the generation of the 
complete event. Thus one may e.g. call either pythia.process.list() 
or pythia.event.list(). To distinguish those two rapidly at visual
inspection, the "Pythia Event Listing" header is printed out 
differently, in one case adding "(hard process)" and in the other 
"(complete event)". This is set by a header(string) method.

One data member in an Event object is used to keep track of the  
largest col() or acol() tag set so far, so that new ones do not clash. 
The lastcolTag() method returns the last tag assigned, i.e. largest 
value in the current event, and nextColTag() ups it by one before 
returing the value. The latter method thus is used when a new colour 
tag is needed.  

<mode> Event:startColTag = 100 min = 0 max = 1000
This sets the initial value used, so that the first one assigned is
startColTag+1, etc. The Les Houches accord suggests this number to
be 500, but 100 works equally well.

The scale methods can be used to set or get the scale (in GeV) of the
event as a whole. Further methods for event properties may be added in
the future.

There are also a few methods with an individual particle index i as
input, but requiring some search operations in the event record, and
therefore not possible to define inside the Particle class:
* motherList(i) returns a vector<int> containing a list of all the
    mothers of a particle. This list is empty for entry 0 , while 
    normally it contains one, two or many mothers. The latter case 
    applies e.g. to string fragmentation, where the whole fragmenting 
    system is counted as mothers. Mothers are listed in ascending order.
* daughterList(i) returns a vector<int> containing a list of all the
    daughters of a particle. This list is empty for a particle that did 
    not decay (or, if the evolution is stopped early enough, a parton
    that did not branch), while otherwise it can contain a list of 
    varying length, from one to many. Many partons may have the same 
    daughterList, e.g. in the hard process and fragmentation steps.
    For the two incoming beam particles, all shower initiators and beam 
    remnants are counted as daughters, with the one in slot 0 being
    the one leading up to the hardest interaction. 
* iTopCopy(i) and iBotCopy(i) are used to trace carbon copies of
    the particle at index i up to its top mother or down to its bottom
    daughter. If there are no such carbon copies, i itself will be 
    returned.
* iTopCopyId(i) and iBotCopyId(i) also trace top mother and bottom
    daughter, but do not require carbon copies, only that one can find 
    an unbroken chain, of mothers or daughters, with the same flavour id 
    code. The behaviour when trying to trace a gluon through a shower, 
    with its g -> g g branchings, is then rather unpredictable. Similarly, 
    a hard scattering such as u u -> u u is better avoided. It should 
    work well for "rare" particles, not found in the beams, so that the
    program is not fooled by ambiguities. 
* sisterList(i) returns a vector<int> containing a list of all the 
    sisters of a particle, i.e. all the daughters of the first mother,
    except the particle itself. 
* sisterListTopBot(i) returns a vector<int> containing a list of all 
    the sisters of a particle, tracking up and back down through carbon 
    copies if required. That is, the particle is first traced up with
    iTopCopy() before its mother is found, and then all the particles
    in the daughterList() of this mother are traced down with iBotCopy(),
    omitting the original particle itself. 
* isAncestor(i, iAncestor) traces the particle i upwards through mother,
    grandmother, and so on, until either iAncestor is found or the
    top of the record is reached. Normally one unique mother is required,
    as is the case e.g. in decay chains or in parton showers, so that
    e.g. the tracing through a hard scattering would not work. For
    hadronization, currently first-rank hadrons are identified with the
    respective string endpoint quark, which may be useful e.g. for b
    physics. However, currently ministrings or junction topologies give 
    false. (??)  

The event record also contains a vector of junctions, which often
is empty or else contains only a very few per event. Methods are
available to add further junctions or query the current junction list.
This is only for the expert user, however, and is not discussed
further here.  

---------------------------------------------------------------------- 

References

[1] Particle Data Group, S. Eidelman et al., 
    Phys. Lett. B592 (2004) 1

[2] E. Boos et al., in the Proceedings of the Workshop on Physics at 
    TeV Colliders, Les Houches, France, 21 May - 1 Jun 2001 
    [hep-ph/0109068]

---------------------------------------------------------------------- 

Copyright C 2006 Torbjorn Sjostrand


